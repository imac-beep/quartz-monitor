package com.quartz.monitor.db;

import java.sql.SQLException;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;

import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.ResultSetHandler;
import org.apache.commons.dbutils.handlers.BeanHandler;
import org.apache.commons.dbutils.handlers.BeanListHandler;
import org.apache.commons.lang3.ArrayUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public abstract class BasedDaoSupport<T> {
	
	protected Logger log = LoggerFactory.getLogger(getClass());
	
	private QueryRunner run = new QueryRunner(DBUtil.getDataSource());

	protected List<T> queryList(String sql, Class<T> clazz, Object... params) throws SQLException {
		
		this.traceSQLStmt(DBOperationType.QUERY, sql, params);
		
		ResultSetHandler<List<T>> rsh = new BeanListHandler<T>(clazz);
		
		List<T> result = run.<List<T>>query(sql, rsh, params);
		
		return result;
	}

	/**
	 * 添加SQL执行打印
	 * @param operationType 操作类型
	 * @param sql 执行语句
	 * @param params 参数
	 */
	protected void traceSQLStmt(DBOperationType operationType, String sql, Object... params) {
		if(log.isDebugEnabled()) {
			log.debug("\n {} SQL ======>>>>>>> [{}]", operationType);
			if(ArrayUtils.isNotEmpty(params)) {
				StringBuilder builder = new StringBuilder();
				builder.append("\n=============================================================================\n");
				builder.append(operationType).append(" sql with parameters, length ===>>>").append(params.length);
				for (int i = 0; i < params.length; i++) {
					builder.append("\n\t[index=").append(i).append(", value=").append(params[i]).append("]");
				}
				builder.append("\n=============================================================================");
				log.debug(builder.toString());
			}
		}
	}
	
	protected T query(String sql, Class<T> clazz, Object... params) throws SQLException {
		this.traceSQLStmt(DBOperationType.QUERY, sql, params);
		// Use the BeanHandler implementation to convert the first
		// ResultSet row into a JavaBean.
		ResultSetHandler<T> rsh = new BeanHandler<T>(clazz);
		// Execute the SQL statement with one replacement parameter and
		// return the results in a new Person object generated by the BeanHandler.
		return run.<T>query(sql, rsh, params);
	}
	
	protected int update(String sql, Object... params) throws SQLException {
		this.traceSQLStmt(DBOperationType.UPDATE, sql, params);
		return run.update(sql, params);
	}
	
	protected int update(String sql) throws SQLException {
		if(log.isDebugEnabled()) {
			log.debug("\n Update SQL ======>>>>>>> " + sql);
		}
		return run.update(sql);
	}
	
	protected int[] batch(String sql, Object[][] params) throws SQLException {
		this.traceSQLStmt(DBOperationType.BATCH, sql, params);
		return run.batch(sql, params);
	}

	private enum DBOperationType {
		INSERT("Insert"),
		UPDATE("Update"),
		DELETE("Delete"),
		SELECT("Select"),
		QUERY("Query"),
		BATCH("Batch");

		private String text;

		DBOperationType(String text) {
			this.text = text;
		}

		@Override
		public String toString() {
			return this.text;
		}
	}

}
