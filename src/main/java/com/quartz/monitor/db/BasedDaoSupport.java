package com.quartz.monitor.db;

import java.sql.SQLException;
import java.util.List;

import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.ResultSetHandler;
import org.apache.commons.dbutils.handlers.BeanHandler;
import org.apache.commons.dbutils.handlers.BeanListHandler;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public abstract class BasedDaoSupport<T> {
	
	protected Logger log = LoggerFactory.getLogger(getClass());
	
	private QueryRunner run = new QueryRunner(DBUtil.getDataSource());

	protected List<T> queryList(String sql, Class<T> clazz, Object... params) throws SQLException {
		
		boolean isParamsEmpty = this.isArrayEmpty(params);
		
		if(log.isDebugEnabled()) {
			log.debug("\n Query SQL ======>>>>>>> {" + sql + "}");
			if(!isParamsEmpty) {
				StringBuilder builder = new StringBuilder();
				builder.append("\n=============================================================================\n");
				builder.append("Query sql with parameters, length ===>>>").append(params.length);
				for (int i = 0; i < params.length; i++) {
					builder.append("\n\t[index=").append(i).append(", value=").append(params[i]).append("]");
				}
				builder.append("\n=============================================================================");
				log.debug(builder.toString());
			}
		}
		
		ResultSetHandler<List<T>> rsh = new BeanListHandler<T>(clazz);
		
		List<T> result = isParamsEmpty ? run.query(sql, rsh) : run.query(sql, rsh, params);
		
		return result;
	}
	
	protected T query(String sql, Class<T> clazz, Object... params) throws SQLException {
		boolean isParamsEmpty = this.isArrayEmpty(params);
		
		if(log.isDebugEnabled()) {
			log.debug("\n Query SQL ======>>>>>>> " + sql);
			if(!isParamsEmpty) {
				StringBuilder builder = new StringBuilder();
				builder.append("\n=============================================================================\n");
				builder.append("Query sql with parameters, length ===>>>").append(params.length);
				for (int i = 0; i < params.length; i++) {
					builder.append("\n\t[index=").append(i).append(", value=").append(params[i]).append("]");
				}
				builder.append("\n=============================================================================");
				log.debug(builder.toString());
			}
		}
		// Use the BeanHandler implementation to convert the first
		// ResultSet row into a JavaBean.
		ResultSetHandler<T> rsh = new BeanHandler<T>(clazz);
		// Execute the SQL statement with one replacement parameter and
		// return the results in a new Person object generated by the BeanHandler.
		return isParamsEmpty ? run.query(sql, rsh) : run.query(sql, rsh, params);
	}
	
	protected int update(String sql, Object... params) throws SQLException {
		if(log.isDebugEnabled()) {
			log.debug("\n Update SQL ======>>>>>>> " + sql);
			if(!this.isArrayEmpty(params)) {
				StringBuilder builder = new StringBuilder();
				builder.append("\n=============================================================================\n");
				builder.append("Query sql with parameters, length ===>>>").append(params.length);
				for (int i = 0; i < params.length; i++) {
					builder.append("\n\t[index=").append(i).append(", value=").append(params[i]).append("]");
				}
				builder.append("\n=============================================================================");
				log.debug(builder.toString());
			}
		}
		return run.update(sql, params);
	}
	
	protected int update(String sql) throws SQLException {
		if(log.isDebugEnabled()) {
			log.debug("\n Update SQL ======>>>>>>> " + sql);
		}
		return run.update(sql);
	}
	
	protected int[] batch(String sql, Object[][] params) throws SQLException {
		if(log.isDebugEnabled()) {
			log.debug("\n Batch SQL ======>>>>>>> " + sql);
			if(null != params && params.length > 0) {
				StringBuilder builder = new StringBuilder();
				builder.append("\n=============================================================================\n");
				builder.append("Query sql with parameters, length ===>>>").append(params.length);
				for (int i = 0; i < params.length; i++) {
					builder.append("\n\t[Param Index =======>>>>>>>>>>").append(i).append("]\n").append("{\n");
					Object[] objects = params[i];
					for (int j = 0; j < objects.length; j++) {
						builder.append("\t[index=").append(i).append(", value=").append(objects[j]).append("]");
					}
					builder.append("\n}");
				}
				builder.append("\n=============================================================================");
				log.debug(builder.toString());
			}
		}
		return run.batch(sql, params);
	}
	
	protected boolean isArrayEmpty(Object... params) {
		return null == params || params.length == 0;
	}
}
